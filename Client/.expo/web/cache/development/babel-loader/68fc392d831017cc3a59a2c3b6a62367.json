{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { io } from \"socket.io-client\";\nvar ConnectionURI = \"http://192.168.9.228:8080\";\nvar socket = io(ConnectionURI);\nexport var notifyUserJoined = function notifyUserJoined(user) {\n  return _regeneratorRuntime.async(function notifyUserJoined$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          socket.emit(\"new-user-connect\", user);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var notifyUserLeave = function notifyUserLeave(user) {\n  return _regeneratorRuntime.async(function notifyUserLeave$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          socket.emit(\"user-disconnect\", user);\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var sendMessage = function sendMessage(message, _id, user) {\n  socket.emit(\"message-send\", {\n    message: message,\n    _id: _id,\n    sender: user\n  });\n};\nexport var waitformessage = function waitformessage(callback) {\n  return _regeneratorRuntime.async(function waitformessage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(socket.on(\"message-recive\", function (message) {\n            callback(message);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var waitForNewUser = function waitForNewUser(callback) {\n  return _regeneratorRuntime.async(function waitForNewUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(socket.on(\"new-user-connect\", function (user) {\n            callback(user);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var waitForUserLeave = function waitForUserLeave(callback) {\n  return _regeneratorRuntime.async(function waitForUserLeave$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(socket.on(\"user-disconnect\", function (user) {\n            callback(user);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getLetestData = function getLetestData(callback) {\n  return _regeneratorRuntime.async(function getLetestData$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(socket.on(\"get-letest-data\", function (data) {\n            callback(data);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/mnt/Softwers And games/Android Development/chatApp/Client/app/api/httpService.js"],"names":["io","ConnectionURI","socket","notifyUserJoined","user","emit","notifyUserLeave","sendMessage","message","_id","sender","waitformessage","callback","on","waitForNewUser","waitForUserLeave","getLetestData","data"],"mappings":";AAAA,SAASA,EAAT,QAAmB,kBAAnB;AAEA,IAAMC,aAAa,GAAG,2BAAtB;AAEA,IAAMC,MAAM,GAAGF,EAAE,CAACC,aAAD,CAAjB;AAEA,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAC9BF,UAAAA,MAAM,CAACG,IAAP,CAAY,kBAAZ,EAAgCD,IAAhC;;AAD8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAIP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAOF,IAAP;AAAA;AAAA;AAAA;AAAA;AAC7BF,UAAAA,MAAM,CAACG,IAAP,CAAY,iBAAZ,EAA+BD,IAA/B;;AAD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAIP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAUC,GAAV,EAAeL,IAAf,EAAwB;AACjDF,EAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA4B;AAAEG,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,GAAG,EAAHA,GAAX;AAAgBC,IAAAA,MAAM,EAAEN;AAAxB,GAA5B;AACD,CAFM;AAIP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACtBV,MAAM,CAACW,EAAP,CAAU,gBAAV,EAA4B,UAACL,OAAD,EAAa;AAC7CI,YAAAA,QAAQ,CAACJ,OAAD,CAAR;AACD,WAFK,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAMP,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAOF,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACtBV,MAAM,CAACW,EAAP,CAAU,kBAAV,EAA8B,UAACT,IAAD,EAAU;AAC5CQ,YAAAA,QAAQ,CAACR,IAAD,CAAR;AACD,WAFK,CADsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAMP,OAAO,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOH,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACxBV,MAAM,CAACW,EAAP,CAAU,iBAAV,EAA6B,UAACT,IAAD,EAAU;AAC3CQ,YAAAA,QAAQ,CAACR,IAAD,CAAR;AACD,WAFK,CADwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAMP,OAAO,IAAMY,aAAa,GAAG,SAAhBA,aAAgB,CAAOJ,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACrBV,MAAM,CAACW,EAAP,CAAU,iBAAV,EAA6B,UAACI,IAAD,EAAU;AAC3CL,YAAAA,QAAQ,CAACK,IAAD,CAAR;AACD,WAFK,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import { io } from \"socket.io-client\";\n\nconst ConnectionURI = \"http://192.168.9.228:8080\";\n\nconst socket = io(ConnectionURI);\n\nexport const notifyUserJoined = async (user) => {\n  socket.emit(\"new-user-connect\", user);\n};\n\nexport const notifyUserLeave = async (user) => {\n  socket.emit(\"user-disconnect\", user);\n};\n\nexport const sendMessage = (message, _id, user) => {\n  socket.emit(\"message-send\", { message, _id, sender: user });\n};\n\nexport const waitformessage = async (callback) => {\n  await socket.on(\"message-recive\", (message) => {\n    callback(message);\n  });\n};\n\nexport const waitForNewUser = async (callback) => {\n  await socket.on(\"new-user-connect\", (user) => {\n    callback(user);\n  });\n};\n\nexport const waitForUserLeave = async (callback) => {\n  await socket.on(\"user-disconnect\", (user) => {\n    callback(user);\n  });\n};\n\nexport const getLetestData = async (callback) => {\n  await socket.on(\"get-letest-data\", (data) => {\n    callback(data);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}